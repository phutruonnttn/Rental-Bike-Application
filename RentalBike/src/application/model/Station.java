package application.model;
// Generated Dec 4, 2021, 8:58:47 PM by Hibernate Tools 3.5.0.Final

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Station generated by hbm2java
 */
@Entity
@Table(name = "station", schema = "public")
public class Station implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Id

	@Column(name = "station_code", unique = true, nullable = false)
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int stationCode;
	
	@Column(name = "station_name")
	private String stationName;

	@Column(name = "address")
	private String address;

	@Column(name = "capacity")
	private Integer capacity;
	

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "station")
	private Set<Bike> bikes = new HashSet<Bike>(0);

	public Station() {
	}

	public Station(String stationName, String address, Integer capacity, Set<Bike> bikes) {
		this.stationName = stationName;
		this.address = address;
		this.capacity = capacity;
		this.bikes = bikes;
	}

	public int getStationCode() {
		return this.stationCode;
	}


	public String getStationName() {
		return this.stationName;
	}

	public void setStationName(String stationName) {
		this.stationName = stationName;
	}

	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public Integer getCapacity() {
		return this.capacity;
	}

	public void setCapacity(Integer capacity) {
		this.capacity = capacity;
	}

	public Set<Bike> getBikes() {
		return this.bikes;
	}

	public void setBikes(Set<Bike> bikes) {
		this.bikes = bikes;
	}
	
	public void setStationCode(int code) {
		this.stationCode = code;
	}

	// number bike in the station can be rent
	public int getNumberBikeAvailable() {
		int count = 0;
		Iterator<Bike> iterator = bikes.iterator();
		while (iterator.hasNext()) {
			count += ((iterator.next().getRentingStatus() == false) ? 1 : 0);
        }
		return count;
	}

	// number slot can return bike
	public int getEmptySlot() {
		return this.capacity - this.getNumberBikeAvailable();
	}

}
